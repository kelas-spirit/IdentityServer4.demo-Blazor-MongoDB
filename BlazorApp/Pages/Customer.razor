@page "/customers"

<h3>Customers</h3>
@using BlazorApp.Data
@inject ICustomerRazorService customerService
@inject IJSRuntime JsRuntime
@inject Microsoft.AspNetCore.Components.NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (customers == null)
{
    <p><em>Table is empty...</em></p>
}
else
{
    <a class="btn btn-danger" @onclick="RemoveToken">Logout</a>
    <table class="table">
        <thead>
            <tr>
                <th>Company Name</th>
                <th>Contact Name</th>
                <th>Address</th>
                <th>Country</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customers)
            {
                <tr>
                    <td>@customer.CompanyName</td>
                    <td>@customer.ContactName</td>
                    <td>@customer.Address</td>
                    <td>@customer.Country</td>
                    <td><a href="/customer-details/@customer.Id">Edit</a></td>
                    <td><a href="/customers/#" style="color:red" @onclick="@(async () => await delete(@customer.Id))">Delete</a></td>
                </tr>
            }
        </tbody>
    </table>
    <a class="btn btn-info" href="/customer-details/0">Add</a>
}

@code {

    private List<BlazorApp.Models.Customer> customers;
    public string token { get; set; }
    protected override async Task OnInitializedAsync()
    {

        token = await localStorage.GetItemAsync<string>("apiToken");
        if (string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/login?returnUrl=customers");
        }
        else
        {
            var data = await customerService.GetCustomersAsync(token);
            if(data.StatusCode == (int)System.Net.HttpStatusCode.Unauthorized)
            {
                // token has expired
                Navigation.NavigateTo("/login?returnUrl=customers");
            }
            customers = data.Customers;
        }
    }

    protected async Task delete(string Id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?");
        if (confirmed)
        {
            // Delete!
            var result = await customerService.DeleteAsync(Id, token);
            if (result == 200)
            {
                var data = await customerService.GetCustomersAsync(token);
                customers = data.Customers;
            }
            if(result == (int)System.Net.HttpStatusCode.Unauthorized)
            {
                Navigation.NavigateTo("/login?returnUrl=customers");
            }
        }
    }
    public async Task RemoveToken()
    {
        await localStorage.RemoveItemAsync("apiToken");
        Navigation.NavigateTo("/");
    }
}
